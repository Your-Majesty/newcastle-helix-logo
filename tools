#!/usr/bin/env node

const spawn = require('child_process').spawn
const argv = process.argv

const servers = {
  internal: [
    { user: 'gatekeeper', host: '192.168.1.95', path: '/var/www/newcastle-helix' }
  ],
  staging: [
    { user: 'root', host: '209.97.138.182', path: '/var/www/newcastle-helix' }
  ],
  production: [
    { user: 'root', host: '178.128.168.20', path: '/var/www/newcastle-helix' }
  ]
}

async function pause(time) {
  return new Promise((resolve) => {
    setTimeout(resolve, time)
  })
}

console.log(`
 __   _ _______ _  _  _ _______ _______ _______ _______        _______
 | \\  | |______ |  |  | |       |_____| |______    |    |      |______
 |  \\_| |______ |__|__| |_____  |     | ______|    |    |_____ |______
 _     _ _______        _____ _     _
 |_____| |______ |        |    \\___/
 |     | |______ |_____ __|__ _/   \\_

          _____   ______  _____
  |      |     | |  ____ |     |
  |_____ |_____| |_____| |_____|
`)


if (argv[2] == 'help' || !argv[2]) {
  console.log(`

Available commands:

  deploy:<environment> [<tag/branch>]
    Deploy to an environment

    Examples:
      Pull latest:    ./tools deploy:staging
      Deploy 1.0.4:   ./tools deploy:production 1.0.4

  ssh:prepare
    Prepare local machine for deployment.

  renew-ssl:<environment>
    Updates the SSL and distributes it amongst all the servers.

If you have issues deploying, try running
  ./tools ssh:prepare

This will set up your first-run ssh settings to allow SSH Agent Forwarding
(https://developer.github.com/v3/guides/using-ssh-agent-forwarding/).
Only run this command ONCE. It adds settings to your ~/.ssh/config.

`.trim())

  return
}

if (argv[2] == 'ssh:prepare') {
  var serversKeysArray = Object.keys(servers)
  var serversValuesArray = Object.values(servers)

  spawn(`
    ${serversKeysArray.map((k, i) => `
      echo "Adding SSH Agent Forwarding for '${k}'..." &&

      ${serversValuesArray[i].map(s => `
        echo "Host ${s.host}\n  ForwardAgent yes" >> ~/.ssh/config &&
      `).join('')}
    `).join('')}

    echo 'done!';
  `, {
    shell: true,
    stdio: 'inherit'
  })
}

if (argv[2].indexOf('deploy') > -1) {
  var target = argv[2].split(':')

  var gitMethod = `
    git fetch --all &&
    git pull &&
  `

  if (argv[3]) {
    var tag = argv[3]

    gitMethod = `
      git fetch --all &&
      echo 'Resetting to tag ${tag}';
      git reset --hard ${tag} &&
    `
  }

  if (servers[target[1]]) {
    (async() => {
      console.log(`Deploying to`)
      console.log()
      console.log(`  ${target[1].toUpperCase()} `)
      console.log()
      console.log()
      console.log(`To cancel, press CTRL+C now.`)
      console.log()
      await pause(500)
      console.log(`Deploying in: 3 seconds`)
      await pause(1000)
      console.log(`Deploying in: 2 seconds`)
      await pause(1000)
      console.log(`Deploying in: 1 second!`)
      await pause(1000)

      console.log()
      console.log(`Continuing...`)
      console.log()

      spawn(`
        ssh-add;

        ${servers[target[1]].map(s => `
          echo 'Connecting to ${s.host}...';
          echo '';

          ssh ${s.user}@${s.host} "
            cd ${s.path};
            rm -r app/package-lock.json;

            echo '';
            echo 'Running git commands...';
            echo '';

            ${gitMethod}

            docker-compose exec web bash -c '
              npm install &&
              gulp &&
              pm2 reload all;
            '
          ";
        `).join('')}
      `, {
        shell: true,
        stdio: 'inherit'
      })
    })()
  } else {
    console.log('No target supplied, or deploy target not found.')
  }
}

if (argv[2].indexOf('renew-ssl') > -1) {
  var target = argv[2].split(':')

  if (servers[target[1]]) {
    (async() => {
      console.log(`Attempting to renew SSL certificate on`)
      console.log()
      console.log(`  ${target[1].toUpperCase()} `)
      console.log()
      console.log()
      console.log(`To cancel, press CTRL+C now.`)
      console.log()
      await pause(500)
      console.log(`Renewing SSL in: 3 seconds`)
      await pause(1000)
      console.log(`Renewing SSL in: 2 seconds`)
      await pause(1000)
      console.log(`Renewing SSL in: 1 second!`)
      await pause(1000)

      console.log()
      console.log(`Continuing...`)
      console.log()

      spawn(`
        ssh-add;

        ${servers[target[1]].map((s, i) => `
          ${i == 0 ? `
            echo 'Skipping server at 0...';
          ` : `
            echo 'Shutting down server ${i}';

            ssh ${s.user}@${s.host} "
              cd /var/www/nginx-proxy &&
              docker-compose down &&
            " &&
          `}
        `).join('')}

        echo;
        echo 'Performing cert renewal on server 0...';
        ssh ${servers[target[1]][0].user}@${servers[target[1]][0].host} "
          echo;
          echo 'Running letsencrypt renew...';
          letsencrypt renew &&

          echo;
          echo 'Distributing SSL certificate amongst all servers...';

          ${servers[target[1]].map((s, i) => `
            echo;
            ${i == 0 ? `
              echo 'Skipping server at 0...';
            ` : `
              echo 'Rsyncing certs from server 0 to ${i}';
              rsync -avz /etc/letsencrypt/live/ ${s.user}:/etc/letsencrypt/live &&
            `}
          `).join('')}
        " &&

        echo;
        echo 'Restarting all servers...';

        ${servers[target[1]].map((s, i) => `
          echo;
          echo 'Restarting server ${i}';

          ssh ${s.user}@${s.host} "
            cd /var/www/nginx-proxy &&
            docker-compose down &&
            docker-compose up -d;
          ";
        `).join('')}

        echo;
        echo ' -- Done';
      `, {
        shell: true,
        stdio: 'inherit'
      })
    })()
  } else {
    console.log('No target supplied, or deploy target not found.')
  }
}
