

/* Strip Unit */
  @function strip-unit($number) {
    @if type-of($number) == 'number' and not unitless($number) {
      @return $number / ($number * 0 + 1);
    }

    @return $number;
  }

  /* String Replace */

  @function str-replace($string, $search, $replace: "") {
    $index: str-index($string, $search);

    @if $index {
      @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
    }

    @return $string;
  }

// Fonts
  @mixin font-face($name, $path, $weight: null, $style: null, $exts: eot woff ttf svg) {
    $src: null;

    $extmods: (
      eot: "?",
      svg: "#" + str-replace($name, " ", "_")
    );

    $formats: (
      otf: "opentype",
      ttf: "truetype"
    );

    @each $ext in $exts {
      $extmod: if(map-has-key($extmods, $ext), $ext + map-get($extmods, $ext), $ext);
      $format: if(map-has-key($formats, $ext), map-get($formats, $ext), $ext);
      $src: append($src, url(quote($path + "." + $extmod)) format(quote($format)), comma);
    }

    @font-face {
      font-family: quote($name);
      font-style: $style;
      font-weight: $weight;
      src: $src;
    }
  }
  
  // Lerp
  @mixin calc-value($property, $min-size, $max-size, $lower-range: $lower-sizing-range, $upper-range: $upper-sizing-range) {

    $diff-size: strip-unit($max-size - $min-size);
    $diff-range: strip-unit($upper-range - $lower-range);
    #{$property}: calc(#{$min-size} + #{$diff-size} * ((100vw - #{$lower-range}) / #{$diff-range}));

    @media screen and (max-width: $lower-range) {
      #{$property}: $min-size;
    }

    @media screen and (min-width: $upper-range) {
      #{$property}: $max-size;
    }
  }